#include <iostream>
#include <cmath>

/*
Мы придумываем фэнтезийную онлайн-игру в жанре RPG. 
В орка стреляют огненными шарами разной степени мощности, но у него есть очки здоровья и показатель сопротивляемости магии. 
Очки здоровья, сопротивляемость магии и мощность огненного шара — это вещественные числа от нуля до единицы включительно. 
Чем больше мощность, тем больше урон здоровью, но чем больше сопротивляемость магии, тем урон меньше. 
Например, если сопротивляемость равна нулю (0%), то будет нанесён урон, равный мощности огненного шара. 
Если сопротивляемость равна единице (100%), урон будет равен нулю, даже если мощность заклинания максимальна.

Напишите программу, в которой пользователь сначала задаёт количество здоровья и сопротивляемость магии орка, 
а после стреляет в него огненными шарами разной мощности, пока орк не погибнет. 
Мощность удара вводится с клавиатуры с каждым выстрелом. 
После каждого заклинания программа выводит на экран итоговый урон от удара и оставшиеся очки здоровья орка. 
Показатель сопротивляемости магии не изменяется при попадании. Обеспечьте контроль ввода.

Обратите внимание, что сопротивляемость обозначает только долю от повреждения, которая приходится на орка. Пример:

Урон 0.1, сопротивляемость 0.5, по орку будет нанесено 0.05 урона.

Урон 0.2, сопротивляемость 0.5, по орку будет нанесено 0.1 урона.

Урон 1, сопротивляемость 0.2, по орку будет нанесено 0.8 урона.

Рекомендации по выполнению
    Для решения использовать цикл while.

Что оценивается
    Все величины должны измеряться в одной шкале — от 0 до 1.

    Мощность удара считается с учётом сопротивляемости.
*/

int main() {
    float health, resist, power;
    std::cout << "Введите очки здоровья, сопротивления магии и мощности заклинания: ";
    std::cin >> health >> resist >> power;
    if (health <= 0.0f || resist < 0.0f || power < 0.0f) {
        std::cout << "Введены некорректные данные";
        return 0;
    }

    while (health > 0.0f) {
        float curDamage = power * (1.0f - resist);
        std::cout << "Урон " << power << ", сопротивляемость " << resist << ", орку будет нанесено " << curDamage << " урона.\n";
        health -= curDamage;
        std::cout << "Осталось очков здоровья: " << (health <= 0.0f ? 0.0f : health) << '\n';
    }


    return 0;
}