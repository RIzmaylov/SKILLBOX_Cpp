#include <iostream>
#include <cmath>

/*
Вы решили открыть бизнес по производству игровых деревянных кубиков для детей. 
Вы узнали, что лучше всего продаются кубики со стороной 5 см в наборах по несколько штук, 
причём кубиков в наборе должно быть достаточно, чтобы сложить из них один большой куб. 
Для изготовления кубиков к вам в мастерскую поступают деревянные бруски в форме прямоугольных параллелепипедов 
любых размеров.

Для оптимизации бизнес-процессов напишите программу, которая по заданным размерам исходного бруска определяет, 
сколько кубиков из него можно изготовить, можно ли из них составить набор для продажи и если можно, 
то максимальное число кубиков в этом наборе. Все кубики должны быть из цельного дерева без использования клея. 
Размеры бруска — вещественные числа. Обеспечьте контроль ввода.

Например:

Из бруска 20x35x5 можно изготовить 28 кубиков.
Из 28 кубиков можно собрать набор из 27 кубиков.

Пример выполнения

Введите размеры бруска:

X: 5

Y: 35,76

Z: 35,05

Вывод:

Из этого бруска можно изготовить 49 кубиков.

Из них можно составить набор из 27 кубиков.

Рекомендации по выполнению
    Кубики изготавливаются только цельными, не из нескольких частей бруска. Минимальный размер бруска — 5x5x5 см. Подумайте как проще разбить брусок на такие кубики.
    Минимальный размер набора — 2x2x2 = 8 кубиков.
Что оценивается
    Правильно считается количество кубиков, которое можно получить из бруска.
    Количество кубиков в наборе не превышает количество кубиков, полученное из бруска.
*/
int main() {
    float rectX, rectY, rectH, cubeSize = 5.0;
    std::cout << "Введите размеры бруска: \n";
    std::cout << "X: ";
    std::cin >> rectX;
    std::cout << "Y: ";
    std::cin >> rectY;
    std::cout << "H: ";
    std::cin >> rectH;

    if (rectX <= 0.0f || rectY <= 0.0f || rectH <= 0.0f) {
        std::cout << "Введены некорректные данные!";
        return 0;
    }

    if (rectX < 5.0f || rectY < 5.0f || rectH < 5.0f) {
        std::cout << "Из такого бруска кубиков не сделать!";
        return 0;
    }

    int cubesCntX = rectX / cubeSize;
    int cubesCntY = rectY / cubeSize;
    int cubesCntH = rectH / cubeSize;

    int allCubes = cubesCntX * cubesCntY * cubesCntH;

    int minMegaCubeSize = std::cbrt(allCubes);

    std::cout << "Вывод: \n";
    std::cout << "Из этого бруска можно изготовить " << allCubes << " кубиков.\n";
    std::cout << "Из них можно составить набор из " << std::pow(minMegaCubeSize, 3) << " кубиков.\n";

    return 0;
}